#!/usr/bin/ruby

# Ruby server to absorb temperature data
# Tom Trebisky  4-13-2016

# Data this logs will look like this:
# 12-03-2016 10:24:01 18 0 347 109 516
# 12-03-2016 10:25:00 18 0 338 112 521
# 12-03-2016 10:25:59 17 0 331 112 521
# 12-03-2016 10:26:59 18 0 326 112 521
# 12-03-2016 10:27:58 18 0 325 111 519

# The first two columns are date and time
# Then we have a "delay" since the last reading.
# Then an always zero that used to mean something.
# Then: humidity, temp-C, temp-F
#  these values are all *10 so 519 is really 51.9 degrees

require 'socket'
require 'timeout'

myport = 2001

def get_ts
    #td = Time.now.to_a
    s,m,h,d,mo,y,wd,yd,dst,z = Time.now.to_a

    hh = "%02d" % h
    mm = "%02d" % m
    ss = "%02d" % s

    mom = "%02d" % mo
    dd = "%02d" % d

    hms = hh + ":" + mm + ":" + ss
    mdy = mom + "-" + dd + "-" + y.to_s
    return mdy + " " + hms
end

server = TCPServer.open myport
puts "Listening on port #{myport}"
STDOUT.flush

# 3-21-2020
# How can we have this thing tell us when it isn't getting data
# (as when the battery is dead on the ESP unit).
# This thing will sit in accept for eternit.

loop {
    #puts "Listening ..."
    x = server.accept()
    #puts "Connection !!"
    begin
        temps = nil
	ts = get_ts
        Timeout.timeout(2.0) {
	    # client.puts "blah blah"
	    temps = x.gets
        }
	print ts + " " + temps
    rescue Timeout::Error
	print ts + " Read timed out\n"
    end
    STDOUT.flush
    x.close
}

# THE END
